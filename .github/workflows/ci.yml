name: phpList Web Frontend Build
on: [push, pull_request]
jobs:
  main:
    name: phpList Base Dist on PHP ${{ matrix.php-versions }}, with dist ${{ matrix.dependencies }} [Build, Test]
    runs-on: ubuntu-22.04
    env:
      DB_DATABASE: phplist
      DB_USERNAME: root
      DB_PASSWORD: phplist
      BROADCAST_DRIVER: log
    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: false
          MYSQL_ROOT_PASSWORD: ${{ env.DB_PASSWORD }}
          MYSQL_DATABASE: ${{ env.DB_DATABASE }}
        ports:
          - 3306/tcp
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
    strategy:
      fail-fast: false
      matrix:
        php-versions: ['8.1']
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup PHP, with composer and extensions
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-versions }}
          extensions: mbstring, dom, fileinfo, mysql
          coverage: xdebug #optional
      - name: Install Symfony CLI
        run: |
          curl -sS https://get.symfony.com/cli/installer | bash
          mv $HOME/.symfony*/bin/symfony /usr/local/bin/symfony
          symfony version
      - name: Install Google Chrome
        run: |
          curl -sSL https://dl.google.com/linux/linux_signing_key.pub | gpg --dearmor | sudo tee /usr/share/keyrings/google.gpg > /dev/null
          echo "deb [arch=amd64 signed-by=/usr/share/keyrings/google.gpg] http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google-chrome.list
          sudo apt-get update
          sudo apt-get install -y google-chrome-stable
      - name: Set Panther to use Chrome
        run: |
          echo "PANTHER_NO_HEADLESS=0" >> .env.test
          echo "PANTHER_CHROME_BINARY=/usr/bin/google-chrome" >> .env.test
      - name: Start mysql service
        run: sudo /etc/init.d/mysql start
      - name: Verify MySQL connection on host
        run: mysql --host 127.0.0.1 --port ${{ job.services.mysql.ports['3306'] }} -u${{ env.DB_USERNAME }} -p${{ env.DB_PASSWORD }} -e "SHOW DATABASES"
      - name: Get composer cache directory
        id: composer-cache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"
      - name: Cache composer dependencies
        uses: actions/cache@v3
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-
      - name: Install the latest dependencies
        run: composer install
      - name: Set up database schema
        run: mysql --host 127.0.0.1 --port ${{ job.services.mysql.ports['3306'] }} -u${{ env.DB_USERNAME }} -p${{ env.DB_PASSWORD }} ${{ env.DB_DATABASE }} < vendor/phplist/core/resources/Database/Schema.sql
      - name: Validating composer.json
        run: composer validate --no-check-all --no-check-lock --strict;
      - name: Linting all php files
        run: find src/ tests/ public/ -name ''*.php'' -print0 | xargs -0 -n 1 -P 4 php -l; php -l;
      - name: Running integration tests with phpunit
        run: vendor/bin/phpunit tests/Integration/;
      - name: Running the system tests
        run: vendor/bin/phpunit tests/System/;
      - name: Running static analysis
        run: vendor/bin/phpstan analyse -l 5 src/ tests/;
      - name: Running PHPMD
        run: vendor/bin/phpmd src/ text vendor/phplist/core/config/PHPMD/rules.xml;
      - name: Running PHP_CodeSniffer
        run: vendor/bin/phpcs --standard=vendor/phplist/core/config/PhpCodeSniffer/ src/ tests/;
